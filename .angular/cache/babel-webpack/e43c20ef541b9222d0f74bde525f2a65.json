{"ast":null,"code":"import { RouteStop } from '../types';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor() {\n      this.route = {};\n      this.waypointMap = new Map();\n      this.center = new Subject();\n      this.routes = new Subject();\n      this.addressList = new Subject();\n      this.routeAdded = new Subject();\n      this.addresses = [];\n    }\n\n    setCenter(place) {\n      console.log(`New center sent is: ${place.geometry.location}`);\n      this.center.next(place.geometry.location);\n      this.addresses.push(place);\n      console.log(`Currently Stored Addresses: ${this.addresses.toString()}`);\n    }\n\n    addRoute(place, type, wayPointIndex) {\n      this.routeAdded.next(true);\n\n      switch (type) {\n        case RouteStop.START:\n          this.route.start = place.geometry.location;\n          break;\n\n        case RouteStop.WAYPOINT:\n          this.waypointMap.set(wayPointIndex, place.geometry.location); // this.route.waypoints\n          // ? this.route.waypoints.push(place.geometry.location)\n          // : (this.route.waypoints = [place.geometry.location]);\n\n          break;\n\n        case RouteStop.END:\n          this.route.end = place.geometry.location;\n          break;\n      }\n    }\n\n    createWaypointComponent() {\n      this.waypointComponentAmount++;\n      return this.waypointComponentAmount;\n    }\n\n    deleteWaypointComponent(index) {\n      this.waypointMap.delete(index);\n    }\n\n    plotRoute() {\n      console.log(`Start: ${this.route.start} End: ${this.route.end}`);\n\n      if (this.waypointComponentAmount !== 0) {\n        this.route.waypoints = Array.from(this.waypointMap.values());\n        console.log(this.route.waypoints);\n      }\n\n      this.routes.next(this.route);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}