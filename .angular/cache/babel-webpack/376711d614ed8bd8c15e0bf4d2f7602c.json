{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/data.service\";\nconst _c0 = [\"mapRef\"];\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(dataService) {\n      this.dataService = dataService;\n      this.markers = [];\n      this.directionsService = new google.maps.DirectionsService();\n      this.directionsRenderer = new google.maps.DirectionsRenderer();\n    }\n\n    ngOnInit() {\n      this.loadMap();\n      this.directionsRenderer.setPanel(window.document.querySelector('.directionsPanel'));\n      this.directionsRenderer.setMap(this.map);\n      this.dataService.routes.subscribe(newRoute => {\n        let waypoints = [];\n\n        if (newRoute.waypoints) {\n          for (let waypoint of newRoute.waypoints) {\n            waypoints.push({\n              location: waypoint,\n              stopover: true\n            });\n          }\n        }\n\n        for (let marker of this.markers) {\n          marker.setMap(null);\n        }\n\n        this.directionsService.route({\n          origin: newRoute.start,\n          destination: newRoute.end,\n          waypoints: waypoints,\n          optimizeWaypoints: true,\n          travelMode: google.maps.TravelMode.DRIVING\n        }, response => {\n          this.directionsRenderer.setDirections(response);\n          this.getDistance(response);\n        });\n      });\n      this.dataService.center.subscribe(center => {\n        this.map.setCenter(center);\n        let marker = new google.maps.Marker({\n          map: this.map\n        });\n        marker.setPosition(center);\n        this.map.setZoom(15);\n        this.markers.push(marker);\n      });\n    }\n\n    getDistance(response) {\n      let total = 0;\n      let time = 0;\n      let addresses = [];\n      const route = response.routes[0];\n      const from = route.legs[0].start_address;\n      const to = route.legs[route.legs.length - 1].end_address;\n\n      for (let i = 0; i < route.legs.length; i++) {\n        // Record route\n        addresses.push(route.legs[i].start_address);\n        total += route.legs[i].distance.value;\n        time += route.legs[i].duration.value;\n      }\n\n      addresses.push(route.legs[route.legs.length - 1].end_address);\n      addresses.shift();\n      addresses.pop();\n      this.dataService.addressList.next(addresses);\n      time = time / 60;\n      total = total / 1000;\n      document.getElementById('from').innerHTML = from.split(',')[0] + '-' + to.split(',')[0];\n      document.getElementById('duration').innerHTML = Math.round(time) + 'm';\n      document.getElementById('total').innerHTML = Math.round(total) + 'KM';\n    }\n\n    loadMap() {\n      this.map = new window['google'].maps.Map(this.mapElement.nativeElement, {\n        center: {\n          lat: -41.2945923,\n          lng: 174.7629202\n        },\n        zoom: 8,\n        disableDefaultUI: true\n      });\n    }\n\n  }\n\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"app-map\"]],\n    viewQuery: function MapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapElement = _t.first);\n      }\n    },\n    inputs: {\n      center: \"center\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"map\"], [\"mapRef\", \"\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\"#map[_ngcontent-%COMP%]{height:100%;width:100%;box-sizing:border-box;margin:0;padding:0}\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}